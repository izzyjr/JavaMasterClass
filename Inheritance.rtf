{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 In object oriented languages there are key features that make them OOP languages. \
One of these key features or concepts is inheritance. Inheritance affects classes and objects.\
Classes are the blueprints used in order to construct objects. Within classes we can find variables(fields) and functions(methods). We can think of fields as the various features (parameters) that our future objects will be comprised of. Methods will in turn give functionality to these objects and also manipulate its fields. We can think of a car as an object, its various components such as wheels, doors, motor, etc, as its fields. Within the blueprint(class) of our car(object) we can create methods which would give functionality to our car. We could create a method for opening/closing doors, or starting the motor. \
Inheritance describes the action of inheriting the various features of a class into a different class. For example, we could create a class called Vehicle which lays out general fields and methods across all kinds of vehicles. Since the features of our class Vehicle are generalized it would make sense to employ inheritance to inherit these features into a different class called Car, Boat, or Plane. These new classes are not restricted to the information inherited from Vehicle. Its own distinctive features could be added, however a big portion of laying out the blueprint(class) of Car has been done through inheriting the features from our class Vehicle. }